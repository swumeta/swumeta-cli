name: Build and deploy

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  JAVA_VERSION: 21

jobs:
  test-app:
    runs-on: ubuntu-24.04
    outputs:
      imageName: ${{ steps.image.outputs.name }}
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/setup-java@v4
      with:
        distribution: liberica
        java-version: ${{ env.JAVA_VERSION }}
        cache: maven
    - name: Test app
      run: |
        chmod +x ./mvnw
        ./mvnw -B test
    - name: Get image name
      id: image
      run: |
        sudo apt-get install -y libxml2-utils
        chmod +x ./mvnw
        ./mvnw -q -B help:effective-pom -Doutput=pom-effective.xml
        CNB_IMAGE=`xmllint --xpath "//*[local-name()='execution']//*[local-name()='image']/*[local-name()='name']/text()" pom-effective.xml | head -1`
        echo "name=$CNB_IMAGE" >> "$GITHUB_OUTPUT"

  build-image:
    permissions:
      contents: read
      packages: write
    needs:
    - test-app
    strategy:
      matrix:
        os:
        - ubuntu-24.04
    runs-on: ${{ matrix.os }}
    steps:
    - uses: buildpacks/github-actions/setup-pack@v5.8.8
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/setup-java@v4
      with:
        distribution: liberica
        java-version: ${{ env.JAVA_VERSION }}
        cache: maven
    - name: Log in to the container registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build image
      run: |
        chmod +x ./mvnw
        ./mvnw -DskipTests -B spring-boot:build-image
    - name: Deploy image
      run: |
        CNB_TAG="linux-`dpkg --print-architecture`"
        CNB_IMAGE=${{ needs.test-app.outputs.imageName }}
        docker tag $CNB_IMAGE:latest $CNB_IMAGE:$CNB_TAG
        docker push $CNB_IMAGE:$CNB_TAG

  package-image:
    permissions:
      contents: read
      packages: write
    needs:
    - test-app
    - build-image
    runs-on: ubuntu-24.04
    steps:
    - name: Log in to the container registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Package image
      run: |
        CNB_IMAGE=${{ needs.test-app.outputs.imageName }}
        docker manifest create $CNB_IMAGE:latest --amend $CNB_IMAGE:linux-amd64
        docker manifest push $CNB_IMAGE:latest
